datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Authentication

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?   @default("user")
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Products

model Product {
    id           String       @id @default(cuid())
    name         String       @unique
    subname      String?
    brand        String
    image        String?
    descriptions Description?
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @default(now())
}

model Description {
    id            String   @id @default(cuid())
    productId     String   @unique
    info          String?
    detail        String?
    use           String?
    price         Int
    discountPrice Int?
    weight        Int?
    ingredients   String?
    flavors       String[]
    benefits      String[]

    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
